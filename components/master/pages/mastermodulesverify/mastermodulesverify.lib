<?php

class mastermodulesverify extends \common\WAApplication
{
  private $baseModuleEntity = null;
  
  private $filterlist = null;

  public function __construct($template, $language)
  {
    parent::__construct($template, $language);

    $this->baseModuleEntity = \entities\baseModuleEntity::getInstance();
    // filter
    $this->filterlist = $this->base->user->getParameter('modules', 'filterlist');
  }

  // we add our own parameters to cartridge
  public function getParameters($engine, $params)
  {
    return array();
  }
  
  public function status($engine, $params)
  {
    $verify = $this->base->HTTPRequest->getParameter('verify');
    $uptodate = null;
    $extratext = '';
    if ($verify == 1)
    {
      $uptodate = $this->verify();
      if ($uptodate)
      {
        $uptodate['lastretrieve'] = time();
        // keep local cache answer
        $this->base->writeFastObject('protected/master', 'update', $uptodate);
      }
    }
    
    if (!$uptodate)
    {
      $uptodate = $this->base->readFastObject('protected/master', 'update');
      $extratext .= ' (Cached information)';
    }

    if (!$uptodate)
    {
      return array('status' => 'Error', 'message' => 'No diponible', 'currentversion' => \common\Base::VERSION, 'lastversion' => 'No disponible', 'lastretrieve' => 'No disponible');
    }
    
    $wa = null;
    foreach($uptodate['modules'] as $m)
    {
      if ($m['id'] == 'wa')
      {
        $wa = $m;
        break;
      }
    }
    
    if (!$wa)
    {
      return array('status' => 'Error', 'message' => 'No diponible', 'currentversion' => \common\Base::VERSION, 'lastversion' => 'No disponible', 'lastretrieve' => 'No disponible');
    }

    return array('message' => 'Lista de modulos:' . $extratext, 'currentversion' => \common\Base::VERSION, 'lastversion' => $wa['version'], 'lastretrieve' => date('Y-m-d H:i:s', $uptodate['date']));
  }

  public function filter($engine, $params)
  {
    $type = $this->base->HTTPRequest->getParameter('type', \xamboo\Validator::SETOFVALUES, array(1,2,3,4));
    
    if ($type)
    {
      $this->base->user->setParameter('modules', 'filterlist', $type);
      return array('status' => 'OK', 'type' => $type);
    }
    return array('status' => 'Error', 'message' => 'Tipo de filtro no conocido');
  }
  
  public function modules($engine, $params)
  {
    $order = $this->base->HTTPRequest->getParameter('Order');

    switch($order)
    {
      case 'get':
        $r = $this->getData();
        return $r;
    }
  }
  
  private function getData()
  {
    $uptodate = $this->base->readFastObject('protected/master', 'update');
    // read from modules repository
    $modules = $this->baseModuleEntity->getLocalModulesList();

    $result = array();
    $quantity = 0;
    if ($uptodate)
    {
      foreach($uptodate['modules'] as $module)
      {
        if (isset($modules[$module['id']]))
        {
        // installed and upgrade available
        // installed and nothing available
        // not installed and upgrade available
        // not installed and nothing available

          $result[] = array('id' => $module['id'], 'version' => $module['version'], 'date' => $module['date'], 'name' => $module['name'], 'commands' => '<div style="padding: 5px; border-bottom: 1px dotted #666; cursor: pointer; border: 1px solid black; background-color: #ccc;" onclick="mastermodulesverify_download(\''.$module['id'] . '\', \'' . $module['version'].'\');">[Download]</div>');
        }
        else
        {
          $result[] = array('id' => $module['id'], 'version' => $module['version'], 'date' => $module['date'], 'name' => $module['name'], 'commands' => '<div style="padding: 5px; border-bottom: 1px dotted #666; cursor: pointer; border: 1px solid black; background-color: #ccc;" onclick="mastermodulesverify_download(\''.$module['id'] . '\', \'' . $module['version'].'\');">[Download]</div>');
        }
        $quantity++;
      }
    }
    return array('row' => $result, 'total' => $quantity, 'first' => 1, 'quantity' => $quantity, 'page' => 1, 'fullload' => 1);
  }
  
  private function verify()
  {
    // Build the JSON with local existing versions of anything
    $modules = $this->baseModuleEntity->getLocalModulesList();
    $jsonanswer = $this->base->postAPI('https://version.webability.info', 'v1/verify', array('serial' => $this->base->config->SERIAL, 'language' => $this->base->Language, 'modules' => $modules));
    // keep the answer in local config objects
    try
    {
      $answer = json_decode($jsonanswer, true);
    }
    catch (\Exception $e)
    {
      $answer = null;
      print $jsonanswer;
    }
    return $answer;
  }
  
  public function download($engine, $params)
  {
    $module = $this->base->HTTPRequest->getParameter('module');
    $version = $this->base->HTTPRequest->getParameter('version');
    
    $filedata = $this->base->postAPI('https://version.webability.info', 'download', array('serial' => '999999', 'module' => $module, 'version' => $version));
    file_put_contents($this->base->config->BASEDIR . 'modules/' . $module . '.' . $version . '.tgz', $filedata);
    
    $result = shell_exec('cd '.$this->base->config->BASEDIR . 'modules; tar zxvf ' . $module . '.' . $version . '.tgz');
    
    return array('message' => $module . ' ' . $version . ' downloaded. ' . $result);
  }
    
}

?>